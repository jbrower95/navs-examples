// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "navs/src/TaskDispatch.sol";
import "navs/src/ITaskDispatch.sol";
import "navs/src/IBaseNavsReceiver.sol";

/**
 * Auto-generated Service Library for NAVS function calls
 * 
 * This library provides asynchronous calls for functions decorated with navs annotations.
 * All functions submit tasks via TaskDispatch and receive results via callbacks.
 * 
 * Generated by navs-gen on 2025-06-04T14:44:27.012Z
 * Total functions: 1
 */
library NavsAml {

    // Package information constants
    string internal constant PACKAGE_NAME = "navs-aml";
    string internal constant PACKAGE_VERSION = "1.0.0";


    /**
     * Call isAddressSanctioned with callback
     * Function isAddressSanctioned from index.ts
     * The calling contract (address(this)) will receive the callback.
     * @param address_param Parameter of type address
     * @param requiredStakeWei Minimum stake threshold for execution in wei
     * @return taskId Unique identifier for tracking this task
     */
    function isAddressSanctioned(address address_param, uint256 requiredStakeWei) internal returns (uint256 taskId) {
        bytes memory encodedParams = abi.encode(address_param);
        
        return _submitTaskWithCallback(
            "isAddressSanctioned", 
            encodedParams, 
            address(this),
            requiredStakeWei,
            ITaskDispatch.ConsensusType.EXACT_MATCH
        );
    }

    // TaskDispatch contract addresses from navs-deploy

    /**
     * Get TaskDispatch contract address for current chain
     * @return address TaskDispatch contract address (address(0) if not deployed on this chain)
     */
    function getTaskDispatchAddress() internal view returns (address) {
        uint256 chainId = block.chainid;
        if (chainId == 84532) return 0xc739e01E8d873700948AD191d64C3FBaB93b1C1A; // Base Sepolia
        return address(0); // TaskDispatch not deployed on this chain
    }
    
    /**
     * Internal function to handle asynchronous task submission with callback
     * @param functionName The name of the function to execute
     * @param encodedParams ABI-encoded parameters
     * @param callbackReceiver Address that will receive the callback
     * @param requiredStake Minimum stake threshold for execution
     * @param consensusType Type of consensus to use for the task
     * @return taskId Unique identifier for tracking this task
     */
    function _submitTaskWithCallback(
        string memory functionName, 
        bytes memory encodedParams,
        address callbackReceiver,
        uint256 requiredStake,
        ITaskDispatch.ConsensusType consensusType
    ) internal returns (uint256) {
        // Call TaskDispatch with callback receiver
        address taskDispatchAddr = getTaskDispatchAddress();
        require(taskDispatchAddr != address(0), "TaskDispatch address not set for this chain");
        
        uint256 taskId = ITaskDispatch(taskDispatchAddr).submitTask(
            "navs-aml", // Service name from package.json
            "1.0.0", // Service version from package.json
            functionName,
            encodedParams,
            requiredStake, // Use the provided stake threshold
            consensusType, // Use the determined consensus type
            false, // isConsensus
            callbackReceiver // Callback will be executed automatically by TaskDispatch
        );
        
        return taskId;
    }
}
